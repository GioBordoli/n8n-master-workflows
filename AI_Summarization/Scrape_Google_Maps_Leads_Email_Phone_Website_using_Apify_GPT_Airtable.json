{
  "id": "n7GCtCY2vrmRZEPS",
  "meta": {
    "instanceId": "2698fb90c872341655d36c9377b0dd8ca572ac3c6ee494b27ca6ac82ec175b2a"
  },
  "name": "Extract Business Contacts from Google Maps with Apify, GPT, and Airtable",
  "tags": [],
  "nodes": [
    {
      "id": "e5d812c7-bf71-44fc-918b-151eeb1e9fcf",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        620,
        -200
      ],
      "parameters": {
        "width": 400,
        "height": 1720,
        "content": "What if you could **extract every email**, phone number, and website from a specific area in just a few clicks?\n\nIn this workflow, we‚Äôll scrape Google Maps and automatically **organize the data** into an Airtable base.\n\nWe‚Äôll use real estate in Paris as an example, but it works **for any business** ‚Äî from local therapists to inflatable pool dealers.\n\n## Step 1 ‚Äì Launch the Google Maps Scraper\n\nStart with a When clicking Execute workflow trigger to launch the flow manually.\n\nThen, **add an HTTP Request** node with the method set to POST.\n\nüëâ Head over to Apify: Google Maps Extractor\n\nOn the page: [https://apify.com/compass/google-maps-extractor](https://apify.com/compass/google-maps-extractor)\n\nEnter your business keyword (e.g., real estate agency, hairdresser, restaurant)\n\nSet the location you want to target (e.g., Paris, France)\n\nChoose how many results to fetch (e.g., 50)\n\nOptionally, use filters (only places with a website, by category, etc.)\n\n‚ö†Ô∏è No matter your industry, this works ‚Äî just adapt the keyword and location.\n\nOnce everything is filled in:\n\nClick Run to test.\n\nThen, go to the top right ‚Üí click on API.\n\nSelect the API endpoints tab.\n\nChoose Run Actor synchronously and get dataset items.\n\nCopy the URL and paste it into your HTTP Request (in the URL field).\n\nThen enable:\n\n‚úÖ Body Content Type ‚Üí JSON\n‚úÖ Specify Body Using JSON`\n\nGo back to Apify, click on the JSON tab, copy the entire code, and paste it into the JSON body field of your HTTP Request.\n\n\nAt this point, if you run your workflow, you should see a structured output similar to this:\n\ntitle  \nsubTitle  \nprice  \ncategoryName  \naddress  \nneighborhood  \nstreet  \ncity  \npostalCode\n........\n"
      },
      "typeVersion": 1
    },
    {
      "id": "e0fea6a2-9c64-4c24-8508-79f252b09ef2",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1180,
        620
      ],
      "parameters": {
        "color": 2,
        "width": 220,
        "height": 900,
        "content": "## Step 2 ‚Äì Clean and structure the data\n\nOnce the raw data is fetched from Apify, we clean it up using the Edit Fields node.\n\nIn this step, we manually select and rename the fields we want to keep:\n\nTitle ‚Üí {{ $json.title }}\n\nAddress ‚Üí {{ $json.address }}\n\nWebsite ‚Üí {{ $json.website }}\n\nPhone ‚Üí {{ $json.phone }}\n\nURL ‚Üí {{ $json.url }}*\n\nThis node lets us keep only the essentials in a clean format, ready for the next steps.\nOn the right: a clear and usable table, easy to work with.\n\n"
      },
      "typeVersion": 1
    },
    {
      "id": "fc30bfdf-7a69-46d0-9e72-262fd7938f7d",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1620,
        680
      ],
      "parameters": {
        "color": 3,
        "width": 220,
        "height": 840,
        "content": "## Step 3 ‚Äì Loop Over Items\n\nNow that our data is clean (see step 2), we‚Äôll go through it item by item to handle each contact individually.\n\nThe Loop Over Items node does exactly that:\n\nit takes each row from the table (each contact pulled from Apify) and runs the next steps on them, one by one.\n\nüëâ Just set a Batch Size of 20 (or more, depending on your needs).\n\nNothing tricky here, but this step is essential to keep the flow dynamic and scalable.\n"
      },
      "typeVersion": 1
    },
    {
      "id": "d9b647b2-ba50-4912-98d8-e0bd07361e88",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1980,
        720
      ],
      "parameters": {
        "color": 4,
        "height": 800,
        "content": "## Step 4 ‚Äì Extract Only Website URLs (edit field)\n\nAfter looping through each contact one by one (thanks to Loop Over Items), we're refining the data a bit more.\n\nThis time, we only want to keep the website.\n\nWe use the Edit Fields node again, in Manual Mapping mode, with just:\n\nWebsite ‚Üí {{ $json.website }}\n\nThe result on the right? A clean list with only the URLs extracted from Google Maps.\n\nüîß This simple step helps isolate the websites so we can scrape them one by one in the next part of the flow.\n"
      },
      "typeVersion": 1
    },
    {
      "id": "f3198479-6cb4-429c-8521-c96d91ee2a9b",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2340,
        400
      ],
      "parameters": {
        "color": 4,
        "width": 220,
        "height": 1120,
        "content": "## Step 5 ‚Äì Scrape Each Website with an HTTP Request\n\nLet‚Äôs continue the flow: in the previous step, we isolated the websites into a clean list. Now, we‚Äôre going to send a request to each URL to fetch the content of the site.\n\n‚û°Ô∏è To do this, we add an HTTP Request node, using the GET method, and set the URL as:\n\n{{ $json.website }} This value comes from the previous Edit Fields input\n\nThis node will simply ‚Äúvisit‚Äù each website automatically and return the raw HTML code (as shown on the right).\n\nüìÑ That‚Äôs the material we‚Äôll use in the next step to extract email addresses (and any other useful info).\n\nWe‚Äôre not reading this code manually ‚Äî we‚Äôll scan through it line by line to detect patterns that matter to us.\n\nThis is a technical but crucial step: it‚Äôs how we turn a URL into real, usable data. \n"
      },
      "typeVersion": 1
    },
    {
      "id": "99450c1c-db8c-4be7-884e-77391695bb92",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2680,
        500
      ],
      "parameters": {
        "color": 5,
        "width": 360,
        "height": 1020,
        "content": "## Step 6 ‚Äì Extract the Email with GPT\n\nNow that we've retrieved all the raw HTML from the websites using the HTTP Request node, it's time to analyze it.\n\nüí° Goal: detect the most relevant email address on each site (ideally the main contact or owner).\n\nüëâ To do that, we‚Äôll use an OpenAI node (Message a Model). Here‚Äôs how to configure it:\n\n‚öôÔ∏è Key Parameters:\nModel: GPT-4-1-MINI (or any GPT-4+ model available)\n\nOperation: Message a Model\n\nResource: Text\n\nSimplify Output: ON\n\n**Prompt (message you provide):**\n\nLook at this website content and extract only the email I can contact this business. In your output, provide only the email and nothing else. Ideally, this email should be of the business owner, so if you have 2 or more options, try for most authoritative one. If you don't find any email, output 'Null'.\n\nExemplary output of yours:\n\nname@examplewebsite.com\n\n{{ $json.data }} \n"
      },
      "typeVersion": 1
    },
    {
      "id": "8963bf7e-7d98-4416-9108-bd9e9c2156e0",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        3120,
        300
      ],
      "parameters": {
        "color": 6,
        "width": 460,
        "height": 1220,
        "content": "## Step 7 ‚Äì Save the Data in Airtable\n\nOnce we‚Äôve collected everything ‚Äî the business name, address, phone number, website‚Ä¶ \n\nand most importantly the email extracted via ChatGPT ‚Äî we need to store all of this somewhere clean and organized.\n\nüëâ The best place in this workflow is Airtable.\n\nüì¶ Why Airtable?\nBecause it allows you to:\n\nEasily view and sort the leads you've scraped\n\nFilter, tag, or enrich them later\n\nAnd most importantly‚Ä¶ reuse them in future automations\n\n‚öôÔ∏è What we're doing here\n\nWe‚Äôre adding an Airtable ‚Üí Create Record node to insert each lead into our database.\n\nIn this node, we manually map each field with the data we‚Äôve collected earlier in the workflow. Here‚Äôs how it looks:\n\nTitle ‚Üí the name of the business\n‚Üí {{ $('Edit Fields').item.json.Title }}\n\nStreet ‚Üí the full address\n‚Üí {{ $('Edit Fields').item.json.Address }}\n\nWebsite ‚Üí the company‚Äôs website URL\n‚Üí {{ $('Edit Fields').item.json.Website }}\n\nPhone Number ‚Üí the phone number\n‚Üí {{ $('Edit Fields').item.json.Phone }}\n\nEmail ‚Üí the email found by ChatGPT\n‚Üí {{ $json.message.content }}\n\nURL ‚Üí the full Google Maps link\n‚Üí {{ $('Edit Fields').item.json.URL }}\n\nüß† Each of these values comes from previous steps (Edit Fields, HTTP Request, OpenAI), and everything is neatly stored in Airtable ‚Äî ready to be reused, filtered, or exported.\n"
      },
      "typeVersion": 1
    },
    {
      "id": "b21cc192-0e26-45cf-965a-bd00412005b4",
      "name": "Fetch Business Data from Google Maps (Apify)",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        880,
        1260
      ],
      "parameters": {
        "url": "<your apify url>",
        "method": "POST",
        "options": {},
        "jsonBody": "{\n    \"categoryFilterWords\": [\n        \"real estate agency\"\n    ],\n    \"city\": \"Paris\",\n    \"countryCode\": \"fr\",\n    \"language\": \"en\",\n    \"locationQuery\": \"France, Paris\",\n    \"maxCrawledPlacesPerSearch\": 50,\n    \"postalCode\": \"75000\",\n    \"searchStringsArray\": [\n        \"agence immobili√®re\"\n    ],\n    \"skipClosedPlaces\": false\n}",
        "sendBody": true,
        "specifyBody": "json"
      },
      "typeVersion": 4.2
    },
    {
      "id": "2976c24c-7032-4e1e-88b6-58eb290abbe4",
      "name": "Clean Google Maps Data",
      "type": "n8n-nodes-base.set",
      "position": [
        1240,
        1260
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "e0ee1e00-da28-49c7-b8ad-b1cf983b1004",
              "name": "Title",
              "type": "string",
              "value": "={{ $json.title }}"
            },
            {
              "id": "ac43f911-1a98-4b12-9c95-b3836e13788d",
              "name": "Address",
              "type": "string",
              "value": "={{ $json.address }}"
            },
            {
              "id": "bdc01304-c710-4aeb-99e5-75924e33b0c6",
              "name": "Website",
              "type": "string",
              "value": "={{ $json.website }}"
            },
            {
              "id": "024a396b-a476-4a72-a39c-3a97e417775c",
              "name": "Phone",
              "type": "string",
              "value": "={{ $json.phone }}"
            },
            {
              "id": "f6f4c12d-401d-4596-8cd4-f1d06e68ecd1",
              "name": "URL",
              "type": "string",
              "value": "={{ $json.url }}"
            }
          ]
        }
      },
      "typeVersion": 3.4
    },
    {
      "id": "19e2d18e-9bb2-445d-9171-51f2d2a53258",
      "name": "Manual Workflow Execution",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        640,
        1260
      ],
      "parameters": {},
      "typeVersion": 1
    },
    {
      "id": "c9bf49f6-f6de-42e8-9d51-74abdfac407b",
      "name": "Iterate Through Each Business Contact",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        1680,
        1260
      ],
      "parameters": {
        "options": {},
        "batchSize": 20
      },
      "typeVersion": 3
    },
    {
      "id": "84306120-0192-452b-b057-f001609b642c",
      "name": "Extract Only Website URLs",
      "type": "n8n-nodes-base.set",
      "position": [
        2060,
        1280
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "ccc11066-fad4-4931-acf6-6c45e5e7b117",
              "name": "Website",
              "type": "string",
              "value": "={{ $json.Website }}"
            }
          ]
        }
      },
      "typeVersion": 3.4
    },
    {
      "id": "c7af89ca-1d92-484c-a524-f1091a6647fa",
      "name": "Fetch Raw HTML Content from Business Website",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        2400,
        1280
      ],
      "parameters": {
        "url": "={{ $json.Website }}",
        "options": {}
      },
      "typeVersion": 4.2
    },
    {
      "id": "20f63382-dec2-4fd3-921f-c7b42cb23724",
      "name": "Extract Business Email from Website HTML (GPT-4)",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "position": [
        2740,
        1280
      ],
      "parameters": {
        "modelId": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini",
          "cachedResultName": "GPT-4.1-MINI"
        },
        "options": {},
        "messages": {
          "values": [
            {
              "content": "=Look at this website content and extract only the email I can contact this business. In your output, provide only the email and nothing else. Ideally, this email should be of the business owner, so if you have 2 or more options, try for most authoritative one. If you don't find any email, output 'Null'.\n\nExemplary output of yours:\n\nname@examplewebsite.com\n\n{{ $json.data }}"
            }
          ]
        }
      },
      "typeVersion": 1.8
    },
    {
      "id": "dde69d47-627c-4fb1-926a-2ac39dbc01bc",
      "name": "Save Cleaned Lead Data into Airtable",
      "type": "n8n-nodes-base.airtable",
      "position": [
        3240,
        1280
      ],
      "parameters": {
        "base": {
          "__rl": true,
          "mode": "list",
          "value": "app7nzaQOYoq0cF1n",
          "cachedResultUrl": "https://airtable.com/app7nzaQOYoq0cF1n",
          "cachedResultName": "GOOGLE MAP SCRAPPING"
        },
        "table": {
          "__rl": true,
          "mode": "list",
          "value": "tblJIrBU19hfFYdL9",
          "cachedResultUrl": "https://airtable.com/app7nzaQOYoq0cF1n/tblJIrBU19hfFYdL9",
          "cachedResultName": "Data"
        },
        "columns": {
          "value": {
            "URL": "={{ $('Clean Google Maps Data').item.json.URL }}",
            "Email": "={{ $json.message.content }}",
            "Title": "={{ $('Clean Google Maps Data').item.json.Title }}",
            "Street": "={{ $('Clean Google Maps Data').item.json.Address }}",
            "Website": "={{ $('Clean Google Maps Data').item.json.Website }}",
            "Phone Number": "={{ $('Clean Google Maps Data').item.json.Phone }}"
          },
          "schema": [
            {
              "id": "Title",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "Title",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "Street",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "Street",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "Website",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "Website",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "Phone Number",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "Phone Number",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "Email",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "Email",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "URL",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": false,
              "required": false,
              "displayName": "URL",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            }
          ],
          "mappingMode": "defineBelow",
          "matchingColumns": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {},
        "operation": "create"
      },
      "typeVersion": 2.1
    }
  ],
  "active": false,
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "8ec78184-bbf5-4955-9d7f-6258b9f33f61",
  "connections": {
    "Clean Google Maps Data": {
      "main": [
        [
          {
            "node": "Iterate Through Each Business Contact",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Only Website URLs": {
      "main": [
        [
          {
            "node": "Fetch Raw HTML Content from Business Website",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Manual Workflow Execution": {
      "main": [
        [
          {
            "node": "Fetch Business Data from Google Maps (Apify)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Iterate Through Each Business Contact": {
      "main": [
        [],
        [
          {
            "node": "Extract Only Website URLs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Business Data from Google Maps (Apify)": {
      "main": [
        [
          {
            "node": "Clean Google Maps Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Raw HTML Content from Business Website": {
      "main": [
        [
          {
            "node": "Extract Business Email from Website HTML (GPT-4)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Business Email from Website HTML (GPT-4)": {
      "main": [
        [
          {
            "node": "Save Cleaned Lead Data into Airtable",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}